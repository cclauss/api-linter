package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

const commonAPIProtosURI = "https://github.com/googleapis/api-common-protos"

func main() {
	outFile := "api_common_protos.go"

	tempDir, err := ioutil.TempDir("", "common_api_protos")
	if err != nil {
		panic(err)
	}
	defer os.RemoveAll(tempDir)

	if err := gitClone(commonAPIProtosURI, tempDir); err != nil {
		panic(err)
	}

	pkgMap := make(map[string]string)
	if err := filepath.Walk(tempDir, func(path string, info os.FileInfo, err error) error {
		if !info.IsDir() && strings.HasSuffix(path, ".proto") {
			pkg, err := extractGoPkg(path)
			if err != nil {
				return err
			}
			pkgMap[pkg] = strings.ReplaceAll(path, tempDir+"/", "")
		}
		return nil
	}); err != nil {
		panic(err)
	}

	w, err := os.Create(outFile)
	if err != nil {
		panic(err)
	}
	defer w.Close()

	fmt.Fprintln(w, "// Code generated by `go run gen/gen_imports.go && go fmt`. DO NOT EDIT.")
	fmt.Fprintln(w, "package protos")
	fmt.Fprintln(w, "import(")
	for pkg, file := range pkgMap {
		fmt.Fprintf(w, "\t_ %q //%q\n", pkg, file)
	}
	fmt.Fprintln(w, ")")
}

func gitClone(uri, outDir string) error {
	cmd := exec.Command("git", "clone", uri, outDir)
	return cmd.Run()
}

func extractGoPkg(filename string) (string, error) {
	f, err := os.Open(filename)
	if err != nil {
		return "", err
	}
	defer f.Close()

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		text := scanner.Text()
		if strings.HasPrefix(text, "option go_package") {
			pkg := strings.ReplaceAll(strings.Split(text, " ")[3], "\"", "")
			return strings.Split(pkg, ";")[0], nil
		}
	}
	return "", fmt.Errorf("No Go package found in file %q", filename)
}
